# This variant is for delta printers.

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
#TEST_RANGE_DELTA SPEED=300 ITERATIONS= 2 SMALLPATTERNSIZE=20 START_ACCEL=5000 END_ACCEL=10000 ACCEL_STEP=1000 

[gcode_macro TEST_RANGE_DELTA]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(100)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    #{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = params.SMALLPATTERNSIZE|default(20)|int %}


    # Acceleration Steps
    {% set start_accel = params.START_ACCEL|default(5000)|int %}
    {% set end_accel  = params.END_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set accel_step = params.ACCEL_STEP|default(1000)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set radius_bound = printer.toolhead.axis_maximum.x - bound %}
        {% set xy_max_pos = ((radius_bound ** 2) / 2) ** 0.5 %}
        {% set x_min = xy_max_pos * -1 %}
        {% set x_max = xy_max_pos %}
        {% set y_min = xy_max_pos * -1 %}
        {% set y_max = xy_max_pos %}

    # Small pattern at center
        # Set small pattern box around center point
        {% set x_center_min = smallpatternsize / 2 * -1 %}
        {% set x_center_max = smallpatternsize / 2 %}
        {% set y_center_min = smallpatternsize / 2 * -1 %}
        {% set y_center_max = smallpatternsize / 2 %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED_DELTA
    
    # Output parameters to g-code terminal
    #{ action_respond_info("TEST_SPEED_DELTA: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
    CG28
    G90
    G4 P1000 
    GET_POSITION
    
    # Perform tests 
    {% for i in range(((end_accel - start_accel)/accel_step + 1)|int) %}
        # Go to starting position
        G0 X{x_min} Y{y_min} Z{printer.toolhead.axis_maximum.z/2} F{speed*60}

        # Set new limits
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={start_accel + accel_step * i} ACCEL_TO_DECEL={((start_accel + accel_step * i)/2)|int} 
        CONSOLE_MESSAGE MSG="Test start for {start_accel + accel_step * i} mm/s^2, at {speed} mm/s for smallsize {x_center_max *2}"

          {% for i in range(iterations) %}
              # Large pattern
                  # Diagonals
                  G0 X{x_min} Y{y_min} F{speed*60}
                  G0 X{x_max} Y{y_max} F{speed*60}
                  G0 X{x_min} Y{y_min} F{speed*60}
                  G0 X{x_max} Y{y_min} F{speed*60}
                  G0 X{x_min} Y{y_max} F{speed*60}
                  G0 X{x_max} Y{y_min} F{speed*60}
                  
                  # Box
                  G0 X{x_min} Y{y_min} F{speed*60}
                  G0 X{x_min} Y{y_max} F{speed*60}
                  G0 X{x_max} Y{y_max} F{speed*60}
                  G0 X{x_max} Y{y_min} F{speed*60}
              
              # Small pattern
                  # Small diagonals 
                  G0 X{x_center_min} Y{y_center_min} F{speed*60}
                  G0 X{x_center_max} Y{y_center_max} F{speed*60}
                  G0 X{x_center_min} Y{y_center_min} F{speed*60}
                  G0 X{x_center_max} Y{y_center_min} F{speed*60}
                  G0 X{x_center_min} Y{y_center_max} F{speed*60}
                  G0 X{x_center_max} Y{y_center_min} F{speed*60}
                  
                  # Small box
                  G0 X{x_center_min} Y{y_center_min} F{speed*60}
                  G0 X{x_center_min} Y{y_center_max} F{speed*60}
                  G0 X{x_center_max} Y{y_center_max} F{speed*60}
                  G0 X{x_center_max} Y{y_center_min} F{speed*60}
          {% endfor %}
      
      #get new position
      G28
      G90
      G4 P1000 
      GET_POSITION

      CONSOLE_MESSAGE MSG="Test finished for {start_accel + accel_step * i} mm/s^2, at {speed} mm/s"

    {% endfor %}


    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
    G28
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED_DELTA

[gcode_macro CG28]
# Required Macros: CONSOLE_MESSAGE
description: Conditional G28
gcode:

    # Check if printer is homed
    {% if "xyz" not in printer.toolhead.homed_axes %} 
        CONSOLE_MESSAGE MSG="Homing printer"
        G28

    {% else %}
        CONSOLE_MESSAGE MSG="Printer already homed"

    {% endif %}

[gcode_macro CONSOLE_MESSAGE]
gcode:
    {% set msg = params.MSG %}
    {action_respond_info(msg)}